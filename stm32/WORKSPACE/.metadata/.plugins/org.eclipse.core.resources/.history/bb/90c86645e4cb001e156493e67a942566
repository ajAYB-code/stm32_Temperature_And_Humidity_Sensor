#include "stm32f4xx_hal_msp.h"
#include "stm32f4xx_hal_gpio.h"
#include "stm32f4xx_hal_tim.h"
#include "stm32f4xx_hal_uart.h"
#include "stm32f4xx_hal_i2c.h"
#include "leds.h"
#include "sw.h"
#include "lm75.h"
#include "stm32f4xx_hal.h"

TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim5;
UART_HandleTypeDef huart2;
I2C_HandleTypeDef hi2c1;


//===========================================================
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
	switch(GPIO_Pin)
	{
		case GPIO_PIN_1: red_led(1); break;
		case GPIO_PIN_0: green_led(1); break;
	}
}
//============================================================
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	if(huart == &huart2)
	{
	}
}
//============================================================
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{

}

float degToFaraday(float tempDeg){
	return (float) (tempDeg * (9/5) + 32);
}



//============================================================
int main()
{
	HAL_Init();
	HAL_MspInit(); // Initialisation des Broches
	green_led(0);
	red_led(0);
	blue_led(0);
	uint16_t temp;

	//Init UART
	huart2.Instance          = USART2;
	huart2.Init.BaudRate     = 115200;
	huart2.Init.WordLength   = UART_WORDLENGTH_8B;
	huart2.Init.StopBits     = UART_STOPBITS_1;
	huart2.Init.Parity       = UART_PARITY_NONE;
	HAL_UART_Init(&huart2);

	//Init I2C
	hi2c1.Instance = I2C1;
	hi2c1.Init.ClockSpeed = 400000;
	HAL_I2C_Init(&hi2c1);
	float tempCylis;




	while(1)
	{
		lm75_read_temp(&temp);
		HAL_Delay(1000);
		tempCylis = ((float)temp / 8.0);

		if(tempCylis > 23.7) red_led(1);
		else red_led(0);

		uart_printf(&huart2, "Temperature(FÂ°): %f\r", degToFaraday(tempCylis));
	}

	return 0;
}
//============================================================

